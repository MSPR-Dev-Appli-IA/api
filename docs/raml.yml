#%RAML 1.0
---
title: Arosaje API
baseUri: https://api.arosaje-stage.locascio.fr/api/{version}
mediaType: application/json
version: v1
protocols: [HTTPS]

/auth:
  /login:
    post:
      description: Log-in a user using it's credentials.
      body:
        application/json:
          type: object
          example: |
            {
              "email": "test@test.com",
              "password": "Test"
            }
      responses:
        200:
          description: User logged in with correct credentials.
          body:
            application/json:
              type: object
              example: |
                {
                  "status": "You're logged in.",
                  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE"
                }
        304:
          description: Always logged
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["error"],
                  "message": ["Your are always logged"]
                }
        404:
          description: User not found
          body:
            application/json:
              example: |
                {
                  "field": ["error"],
                  "message": ["L'email et/ou le mot de passe est incorrect"]
                }
  /signup:
    post:
      description: Allows to create account
      body:
        application/json:
          type: object
          example: |
            {
              "email": "test@test.com",
              "username": "Test",
              "firstname": "Test",
              "lastname": "Test",
              "password": "Azerty"
            }
      responses:
        200:
          description: User created.
          body:
            application/json:
              type: object
              example: |
                {
                  "username": "Test",
                  "firstname": "Test",
                  "lastname": "Test",
                  "role": "6465d4ab9cf91b1420a3f83c",
                  "created_at": "2023-05-14T15:08:28.295+00:00",
                  "deleted_at": "",
                  "local": {
                    "email": "test@test.com",
                    "password": ""
                  },
                  "image": ""
                }
        400:
          description: Error with the passed parameters.
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["email", "password"],
                  "message": ["MongoServerError: E11000 duplicate key error collection", "Le mot de passe doit être au minimum de 6 caractères"]
                }
        304:
          description: Always logged
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["error"],
                  "message": ["Your are always logged"]
                }
  /me:
    get:
      description: Get user informations.
      securedBy: [ jwtUser ]
      responses:
        200:
          description: User informations.
          body:
            application/json:
              type: object
              example: |
                {
                  "username": "Test",
                  "firstname": "Test",
                  "lastname": "Test",
                  "role": "6465d4ab9cf91b1420a3f83c",
                  "created_at": "2023-05-14T15:08:28.295+00:00",
                  "deleted_at": "",
                  "local": {
                    "email": "test@test.com",
                    "password": ""
                  },
                  "image": ""
                }

        404:
          description: User not found.
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["error"],
                  "message": ["User not Found"]
                }
  /logout:
    get:
      description: Log out a user using it's JWT.
      securedBy: [ jwtUser ]
      responses:
        204:

/species:
  /:
    get:
      description: Get all species information's
      securedBy: [ jwtUser ]
      responses:
        200:
          description: Get all species information's
          body:
            application/json:
              type: array
              example: |
                [
                  {
                    "name": "Rosa mosqueta",
                    "images" : [
                      { 
                        path: "https://picturethisai.com/image-handle/website_cmsname/image/1080/157428813641285633.jpeg?x-oss-process=image/format,webp/quality,q_60/resize,l_400&v=1.0"
                      }
                    ],
                    description: "Rosa mosqueta is also known as the musk rose because of its characteristic musky scent. It is often confused with Rosa brunonii, which has a similar aroma but flowers at a different time.",
                    sunExposure: "Rosa mosqueta does best with exposure to full or part sun. They will perform best with direct morning light, but in summer they need protection from the strong afternoon sun",
                    watering: "Every day",
                    optimalTemperature: 50
                  }
                ]
        500:
          description: An error was occurred
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["error"],
                  "message": ["An error was occurred. Please contact us"]
                }
    post:
      description: Create an species
      securedBy: [ jwtBotanist ]
      body:
        application/json:
          type: object
          example: |
            {
              "name": "Rosa mosqueta",
              description: "Rosa mosqueta is also known as the musk rose because of its characteristic musky scent. It is often confused with Rosa brunonii, which has a similar aroma but flowers at a different time.",
              sunExposure: "Rosa mosqueta does best with exposure to full or part sun. They will perform best with direct morning light, but in summer they need protection from the strong afternoon sun",
              watering: "Every day",
              optimalTemperature: 50
            }
      responses:
        204:
          description: Save species
        400:
          description: Error with the passed parameters.
          body:
            application/json:
              type: object
              example: |
                {
                  "field": ["name"],
                  "message": ["MongoServerError: E11000 duplicate key error collection"]
                }
securitySchemes:
  jwtUser:
    description: JWT Bearer token for users.
    type: x-jwtUSer
    describedBy:
      responses:
        401:
          description: Bad token.
        204:
          description: Token valid.
      headers:
        Set-Cookie:
          description: Cookie Content
          type: string
          example: "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE; Path=/; Secure; SameSite=None; Domain=127.0.0.1"

  jwtBotanist:
    description: JWT Bearer token for botanists.
    type: x-jwtBotanist
    describedBy:
      responses:
        401:
          description: Bad token or Invalid Permission.
        204:
          description: Token valid.
      headers:
        Set-Cookie:
          description: Cookie Content
          type: string
          example: "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE; Path=/; Secure; SameSite=None; Domain=127.0.0.1"